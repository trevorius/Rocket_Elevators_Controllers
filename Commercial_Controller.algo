' ADDITIONAL REQUIREMENTS, SORTING ALGORITHM'

SET Battery to INSTANTIATE Battery WITH 66 AND 6 AND 3 AND 1 AND 1

DEFINE Battery USING floors AND basements AND elevators AND BaseFloorNumber AND RCnumber
    Stories : floors
    Floors : floors MINUS basements
    Basements : basements
    Base : baseFloorNumber
    RC : RCnumber 
    NumberOfCollumns:roundUp ( (floors MINUS basements) DIVIDED BY FloorsPerCollumn )
    ALARM : false

    NumberOfBasementCollumns : roundUp ( basements DIVIDED BY FloorsPerCollumn )
    CollumnList : SET to empty list
    FLoorsPerCollumn : 20
    ElevatorsPerCollumn : elevators
    FloorRequestButtonList: SET to empty list
    interfaceDisplay : SET to INSTANTIATE interfaceDisplay USING floors
    
    
    SEQUENCE create_BCollumns USING NumberOfBasementCollumns AND ElevatorsPerCollumn AND Basements  AND FloorsPerCollumn
        SET CollumnCounter to 0
        WHILE CollumnCounter LESS THAN NumberOfBasementCollumns 

             IF Basements LESS THAN FloorsPerCollumn
                Then SET basementsServed to a list of numbers from -1 to NEGATIVE Basements
                    ADD Base to basementsServed
            ELSE    SET basementsServed to a list of numbers from  NEGATIVE CollumnCounter MULTIPLIES FloorsPerCollumn to NEGATIVE (CollumnCounter PLUS 1) MULTIPLIES FloorsPerCollumn
                    IF RC NOT 0 THEN REMOVE 0 from basementsServed 
                    ADD Base to basementsServed
            ENDIF

            SET Collumn to INSTANTIATE Collumn WITH CollumnCounter AND BasementsServed AND ElevatorsPerCollumn 
            ADD Collumn to CollumnList
            INCREMENT CollumnCounter by +1
        ENDWHILE
    ENDSEQUENCE

    SEQUENCE create_Collumns USING NumberOfCollumns AND ElevatorsPerCollumn AND Floors And FloorsPerCollumn AND Base
        SET CollumnCounter to 0
        WHILE CollumnCounter LESS THAN collumnlist length

            IF Floors LESS THAN FloorsPerCollumn
                Then SET floorsServed to a list of numbers from 1 to Floors
                    ADD Base to floorsServed
            ELSE    SET floorsServed to a list of numbers from CollumnCounter MULTIPLIES FloorsPerCollumn to (CollumnCounter PLUS 1) MULTIPLIES FloorsPerCollumn 
                    IF RC NOT 0 THEN REMOVE 0 from floorsServed
                    ADD Base to floorsServed
            ENDIF

            SET CollumnID to NumberOfBasementCollumns + CollumnCounter 
            SET Collumn to INSTANTIATE Collumn WITH CollumnID AND floorsServed AND ElevatorsPerCollumn 
            ADD Collumn to CollumnList
            INCREMENT CollumnCounter by +1
        ENDWHILE
    ENDSEQUENCE

       SEQUENCE create_FloorRequestButtonList USING Floors
       SET counter to NEGATIVE basements
        WHILE counter LESS THAN Floors
            SET FloorRequestButton to INSTANTIATE FloorRequestButton WITH counter
            ADD FloorRequestButton to FloorRequestButtonList
        ENDWHILE
    ENDSEQUENCE
    
    CALL create_BCollumns WITH NumberOfBasementCollumns AND ElevatorsPerCollumn AND Basements  AND FloorsPerCollumn
    CALL create_Collumns WITH NumberOfCollumns AND ElevatorsPerCollumn AND Floors And FloorsPerCollumn AND Base
    CALL create_FloorRequestButtonList WITH Floors



ENDDEFINE

DEFINE interfaceDisplay USING floors
    GOTO: SET to null
    FloorServedBy: SET to list of floors elements       

ENDDEFINE

DEFINE Collumn USING id AND floors AND elevators
    ID: id
    CallButtonList : SET to empty list
    ElevatorList : SET to empty list
    CallList : SET to empty list
    ServedFloors : floors
    numberOfElevators: elevators
    floors : ServedFloors length
    Online : true
    Online_elevatorlist : SET to empty list

    SEQUENCE create_CallButtonList USING floors
        FOR every floor
            SET callButton to INSTANTIATE callButton WITH floor 
            ADD callButton to CallButtonList
           
        ENDFOR
    ENDSEQUENCE
    SEQUENCE create_elevatorlist USING elevators
        IF first ServedFloor  LESS THAN 0
            THEN SET toBase to up
        ELSE SET toBase to down
        ENDIF

        SET counter to 0
        WHILE counter LESS THAN elevators
            SET Elevator to INSTANTIATE Elevator WITH counter AND O AND floors AND toBase
            ADD ELevator to ElevatorList
        ENDWHILE
    ENDSEQUENCE

    CALL create_CallButtonList WITH floors
    CALL create_elevatorlist WITH elevators




ENDDEFINE      

DEFINE CallButton USING floor 
    Number : floor
    Direction : down
    IsPressed : false
ENDDEFINE

DEFINE Elevator USING id AND Location AND floors AND toBase
    ID: id
    FloorNumber : location
    Movement : SET to false 'can be : up, down, or false'
    ToBase : toBase
    DestinationFloor : null
    Distance : null
    Doors: SET to Object
    FloorDisplay : SET to Object
    RequestList: SET to empty list
    Timer : 0
    Online: true

 
    SEQUENCE create_Doors 
        SET doors to INSTANTIATE Doors
    ENDSEQUENCE
    SEQUENCE create_FloorDisplay USING FloorNumber AND Movement
        Number : FloorNumber
        Direction : Movement 
    ENDSEQUENCE
    
    
    CALL create_Doors 
    CALL create_FloorDisplay WITH FloorNumber AND Movement

ENDDEFINE

DEFINE FloorRequestButton USING floor
    Number: floor
    IsPressed :false
ENDDEFINE


DEFINE Doors 
    Open : false
    OpenTime: 5sec
    SafeToClose : true
    PassengerDetector : false
ENDDEFINE

SET OnItsWay to Object

'sort sequence EDX week 3'
'compare values array'
SEQUENCE IS_IN USING value AND list     
    FOR every element of list
        IF value is same as element
            THEN RETURN true
        ELSE RETURN false
        ENDIF
    ENDFOR
ENDSEQUENCE
    

'magnitude is the unsigned value of the variable'
SEQUENCE magnitude USING number     
    IF number LESS THAN 0
        THEN RETURN number MULTIPLIES -1 'opposite number'
    ELSE RETURN number
    ENDIF
ENDSEQUENCE

WHEN a  CallButton of CallButtonList of Collumn is pressed
    CALL pressButton WITH  CallButton of CallButtonList of Collumn
    CALL ModCallElevator WITH Collumn

WHEN a FloorRequestButton of FloorRequestButtonList of Battery is pressed
    CALL pressButton WITH FloorRequestButton of FloorRequestButtonList of Battery 
    CALL ModUsersRequest WITH FloorRequestButton of FloorRequestButtonList of Battery  AND Battery


WHEN 1 second passes
    CALL timerAdd WITH Battery

WHEN 'elevator is IDLE for 5 mins'
    a movement of Elevator of collumn   IS false AND  timer of Elevator of collumn  is 300 
    CALL goToIdle WITH collumn and Battery

WHEN  ALARM of Battery IS CHANGED
    CALL alarm WITH COLLUMN AND Battery



SEQUENCE ModCallElevator USING Collumn

    CALL checkIfElevatorOnline WITH collumn
    
    ADD  Number of CallButton of CallButtonList of Collumn to  CallList of Collumn

    IF CALL ( checkIfElevatorOnItsWay WITH Collumn AND Number of CallButton of CallButtonList of Collumn) RETURNING true 
        THEN elevator stop included in moveelevator
    ELSE
        CALL sortElevatorsByDistance USING  Number of CallButton of CallButtonList of Collumn AND Collumn
        FOR every Elevator of collumn 
            CALL (IS_IN WITH Elevator AND Online_elevatorlist of collumn)RETURNING elevator_IS_IN_Online_elevatorlist
            IF elevator_IS_IN_Online_elevatorlist THEN
                SET selectedElevator to null
                WHILE selectedElevator IS null                    
                    CASE Elevator movement is false 
                        THEN SET Elevator DestinationFloor to  Number of CallButton of CallButtonList of Collumn
                        SET selectedElevator to Elevator
                    CASE FloorNumber of Elevator GREATER THAN callElement Number AND Elevator Movement SAME AS callElement Direction SAME AS down
                        OR ElevatorFloorNumber LESS THAN callButton Number AND ElevatorMovement SAME AS callElement Direction SAME AS up
                        'elevator moving towards called floor'
                        THEN SET Elevator DestinationFloor to  Number of CallButton of CallButtonList of Collumn
                        SET selectedElevator to Elevator
                    ELSE 
                        NEXT Elevator of collumn 
                ENDWHILE
            ENDIF
        ENDFOR
    CALL moveElevator WITH selectedElevator AND Collumn
    ENDIF
ENDSEQUENCE

SEQUENCE ModUsersRequest USING FloorRequestButton of FloorRequestButtonList of Battery  AND Battery

    CALL checkIfElevatorOnline WITH collumn
    
    SET selectedCollumn to null
    CALL selectCollumn WITH Battery AND FloorRequestButton of FloorRequestButtonList of Battery 
    IF selectedCollumn Online = false
        THEN DISPLAY 'elevators to your floor are offline sorry for the inconvenience'
            RETURN
    ENDIF
    
    CALL sortElevatorsByDistance WITH BaseFloorNumber AND  selectedCollumn
    
            
        IF CALL ( checkIfElevatorOnItsWay WITH  selectedCollumn  AND BaseFloorNumber) RETURNING true
            THEN    
                SET selectedElevator to OnItsWay 'set in checkIfElevatorOnItsWay sequence'
        ELSE        
            FOR every Elevator of collumn 
                CALL (IS_IN WITH Elevator AND Online_elevatorlist of collumn)RETURNING elevator_IS_IN_Online_elevatorlist
                IF elevator_IS_IN_Online_elevatorlist THEN

                    IF distance of ELevator IS 0
                        THEN
                        SET selectedElevator to elevator
                    ENDIF
                ENDIF
            ENDFOR
            IF selectedElevator IS null
                THEN
                        
                    FOR every Elevator of selectedCollumn
                        CALL (IS_IN WITH Elevator AND Online_elevatorlist of collumn)RETURNING elevator_IS_IN_Online_elevatorlist
                        IF elevator_IS_IN_Online_elevatorlist THEN

                            IF Movement of Elevator  is false
                                THEN
                                    SET selectedElevator to Elevator
                                    SET DestinationFloor of Elevator  to BaseFloorNumber
                                    CALL moveElevator USING Elevator
                            ENDIF
                        ENDIF
                        
                    ENDFOR
                    IF selectedElevator IS null
                        THEN 
                            SORT Online_elevatorlist of  selectedCollumn to ascending floorNumber
                            Set selectedElevator to last selectedCollumn ONLINE_Elevator
                    ENDIF
            ENDIF
    ENDIF
                            
    ADD Number of FloorRequestButton of FloorRequestButtonList of Battery to RequestList of selectedElevator 
    SORT RequestList of selectedElevator  to ascending (CALL magnitude WITH Requests of selectedElevator)
    SET selectedElevator DestinationFloor to last Request
    CALL moveElevator USING selectedElevator AND selectedCollumn
    SET GOTO of interfaceDisplay of Battery  to selectedElevator
    ADD selectedCollumn to FloorServedBy of  interfaceDisplay of Battery  (Number of FloorRequestButton of FloorRequestButtonList of Battery)element
    ADD selectedElevator to  FloorServedBy of interfaceDisplay of Battery  ( Number of FloorRequestButton of FloorRequestButtonList of Battery )element
    CALL displayInterface WITH interfaceDisplay of Battery 


ENDSEQUENCE

SEQUENCE pressButton USING button 
    Set button IsPressed to true
    DISPLAY light on button
ENDSEQUENCE          

SEQUENCE checkIfElevatorOnItsWay USING collumn AND button 

    FOR every elevator of collumn 

            CAll (magnitude WITH FloorNumber of Elevator) RETURNING magnitude_OF_FloorNumber
            CALL (magnitude WITH  Number of callButton) RETURNING magitude_OF_buttonNumber
            CALL (magnitude WITH (FloorNumber of Elevator MINUS  Number of callButton)) RETURNING distanceToCall
            CALL (magnitude WITH (FloorNumber of Elevator MINUS DestinationFloor of Elevator )) RETURNING distanceToDestination

            IF  'if an elevator's travel takes it through button's floor'
                magnitude_OF_FloorNumber GREATER THAN magitude_OF_buttonNumber AND Elevator Movement SAME_AS button Direction SAME AS down
                OR maagnitude_OF_FloorNumber GREATER THAN magitude_OF_buttonNumber  AND ElevatorMovement SAME AS button Direction SAME AS up
                AND distanceToCall LESS THAN distanceToDestination
                    
                THEN SET OnItsWay to elevator
                    RETURN true
            ELSE
                RETURN false
    ENDFOR
ENDSEQUENCE

SEQUENCE sortElevatorsByDistance USING calledTo AND Collumn
    
    FOR every  Elevator of Collumn
        CALL (magnitude WITH (FloorNumber of Elevator MINUS calledTo)) RETURNING Elevator_distance 
        SET Distance of ELevator TO Elevator_distance 
    ENDFOR
    SORT Online_elevatorlist of collumn by ascending distance
    SET closestElevator to first elevator of Online_elevatorlist of collumn
ENDSEQUENCE

SEQUENCE moveElevator USING elevator AND Collumn 
    
    WHILE FloorNumber of elevator  IS NOT elevator DestinationFloor
        IF elevator DestinationFloor GREATER THAN FloorNumber of Elevator
            THEN SET elevator Movement to up
            INCREMENT floorNumber of elevator by +1
            
        ELSE 
            SET elevator Movement to down
            INCREMENT floorNumber of elevator by -1
        ENDIF

        CALL (IS_IN WITH FloorNumber of Elevator AND CallList of Collumn ) RETURNING FloorNumber_IS_IN_CALLLIST
        CALL (IS_IN WITH FloorNumber of Elevator of Collumn AND requests of elevator ) RETURNING FloorNumber_IS_IN_requests

        IF 'elevator crosses a floor with a call or request in its direction'
            FloorNumber_IS_IN_CALLLIST AND  Movement of Elevator of collumn  IS ToBase of elevator 
            OR FloorNumber_IS_IN_requests AND  Movement of Elevator of collumn  ISNOT  ToBase of elevator 
                THEN 
                    CALL DoorsAction USING Collumn Elevator
                    SET callButton (WITH Number SAME AS FloorNumber of Elevator of Collumn) IsPressed to false
                    SET FloorRequestButton (WITH Number SAME AS FloorNumber of Elevator of Collumn) IsPressed to false
                    REMOVE element with number SAME AS FloorNumber of Elevator of Collumn FROM requests AND calllist
        ENDIF
        CASE Collumn calllist IS NOT empty 
            SET DestinationFloor of Elevator of Collumn to first Collumn callElement 
        CASE requests IS NOT empty
            SET DestinationFloor of Elevator of Collumn to first  elevator request
        ENDCASE

    CALL displayFloorDisplay WITH FloorDisplay

    ENDWHILE
        
    IF FloorNumber of Elevator SAME AS destinationFloor
        THEN SET elevator Movement to false
            CALL StartTimer WITH elevator
            CALL DoorsAction USING Collumn elevator
            SET callButton (WITH Number SAME AS destinationFloor) IsPressed to false
    
    ENDIF
    SET elevator destinationFloor to null
ENDSEQUENCE

SEQUENCE displayFloorDisplay USING FloorDisplay
    DISPLAY Number 
    IF Direction NOT false 
        THEN DISPLAY Direction
    ENDIF

ENDSEQUENCE

SEQUENCE doorsAction USING elevator
    SET elevator Doors open to true
    wait openTime
   
    SET  safeToClose of Doors of elevator to false
    WHILE safeToClose of Doors of elevator IS false
        CALL checkSafeToClose USING  Doors of elevator
            IF safeToClose of Doors of elevator IS true
                THEN SET Doors of elevator  open to false
            ENDIF
    ENDWHILE
    
ENDSEQUENCE

SEQUENCE checkSafeToClose USING doors
    IF  PassengerDetector of doors is false 'not activated'
        SET doors SafeToClose to true
ENDSEQUENCE

SEQUENCE selectCollumn USING Battery AND button
    FOR every Collumn of collumnList of Battery


        CALL (IS_IN WITH button number AND Collumn ServedFloors)RETURNING buttonNumber_IS_IN_servedFloors
        IF  buttonNumber_IS_IN_servedFloors
            THEN SET selectedCollumn to Collumn of collumnList of Battery
    ENDFOR

ENDSEQUENCE

SEQUENCE displayInterface USING interfaceDisplay
    DISPLAY interfaceDisplay GOTO
    Display interfaceDisplay FloorServedBy

ENDSEQUENCE


SEQUENCE timerAdd USING Battery
    FOR every Collumn of collumnList of Battery
        FOR every Elevator of collumn 
            INCREMENT elevator of collumn  Timer by +1
        ENDFOR
    ENDFOR

ENDSEQUENCE

SEQUENCE StartTimer USING elevator
    SET  Timer of elevator to 0
ENDSEQUENCE

SEQUENCE goToIdle USING collumn and Battery
    SET counter to 0
    FOR every elevator of collumn 
        IF movement IS false
            THEN   
                INCREMENT counter by +1
        ENDIF
    ENDFOR
    IF counter IS 0
        RETURN 'avoid a division by 0 on next line'
    SET idleFloor to (floors DIVIDED BY (counter) ROUNDED DOWN)
    SET counter to 1
    FOR every elevator of collumn 
        IF movement IS false
            IF counter is 1
                THEN 
                    SET  destinationFloor of elevator of collumn to  Base of collumn of collumnlist of   Battery
            ELSE
                SET  destinationFloor of elevator of collumn  to (idleFloor MULTIPLIES counter)  
                INCREMENT counter by +1
                CALL moveElevator WITH elevator of collumn 
            ENDIF
        ENDIF
    ENDFOR
    

ENDSEQUENCE

SEQUENCE alarm USING collumn AND battery
    FOR every collumn of collumnlist of  Battery
        SET collumn Online to NOT battery ALARM 'true to be false and vice versa'    
        FOR every elevator of collumn 
            SET Online of elevator of collumn   to  Online of collumn
        ENDFOR
    ENDFOR
ENDSEQUENCE

SEQUENCE checkIfElevatorOnline USING collumn
    FOR every elevator OF collumn
        IF Online OF elevator OF collumn
            ADD elevator OF collumn to  Online_elevatorlist of collumn
        ENDIF
    ENDFOR
ENDSEQUENCE
